# DATA HOST: Databases Only
# Build services one at a time in this order:
# 1. MongoDB (document database)
# 2. PostgreSQL (relational database)
# 3. Redis (cache & sessions)
# 4. MinIO (object storage)

services:
  # ============================================================================
  # PORTAINER AGENT - Container Management
  # ============================================================================
  # Connects to Portainer on observability VM (10.10.10.112:9443)

  portainer-agent:
    image: portainer/agent:latest
    container_name: portainer-agent
    restart: always
    ports:
      - "10.10.10.111:9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - data_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # ALLOY - Log Shipper (sends Docker logs to Loki on observability VM)
  # ============================================================================

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./alloy/config:/etc/alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "10.10.10.111:12345:12345"  # Alloy UI
    networks:
      - data_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # BESZEL AGENT - System Monitor (sends data to Hub on observability VM)
  # ============================================================================
  # Configure after deploying Hub (copy connection details from Hub web UI)

  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host  # Required for network interface stats
    volumes:
      - ./beszel/agent_data:/var/lib/beszel-agent  # Agent persistent data
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker container stats
    environment:
      # These will be provided by Hub web UI after adding system
      # Update these values after deploying Hub
      LISTEN: 45876
      HUB_URL: http://10.10.10.112:8090
      # KEY: "paste_public_key_from_hub_here"
      # TOKEN: "paste_token_from_hub_here"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 1. MONGODB - Document Database
  # ============================================================================
  # Deploy first - used by Komodo, other apps
  # Access: mongodb://10.10.10.111:27017

  mongodb:
    image: mongo:8
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    ports:
      - "10.10.10.111:27017:27017"
    volumes:
      - ./mongodb/data:/data/db
      - ./mongodb/config/mongod.conf:/etc/mongod.conf:ro
      - ./mongodb/certs:/certs:ro
    command: ["--config", "/etc/mongod.conf"]
    networks:
      - data_net
    healthcheck:
      test: ["CMD", "mongosh", "--host", "localhost", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 2. POSTGRESQL - Relational Database
  # ============================================================================
  # Used by: Authentik, Grafana, n8n, Paperless, custom apps

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - "10.10.10.111:5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/certs:/certs:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - data_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 3. REDIS - Cache & Session Storage
  # ============================================================================
  # Used by: Authentik, Paperless, caching layers

  redis:
    image: redis:8-alpine
    container_name: redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    ports:
      - "10.10.10.111:6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/certs:/certs:ro
    networks:
      - data_net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 4. MINIO - S3-Compatible Object Storage
  # ============================================================================
  # Used by: Loki (logs), backups, object storage needs

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9002"
    ports:
      - "10.10.10.111:9000:9000"  # S3 API
      - "10.10.10.111:9002:9002"  # Web Console
    volumes:
      - ./minio/data:/data
      - ./minio/certs:/certs:ro
    networks:
      - data_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  data_net:
    driver: bridge

volumes:
  mongodb_data:
  # postgres_data:
  # redis_data:
  # minio_data:
