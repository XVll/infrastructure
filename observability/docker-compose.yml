
# OBSERVABILITY HOST: Komodo + Monitoring Stack
# Build services one at a time in this order:
# 1. Komodo (container management - requires MongoDB from data host)
# 2. Prometheus (metrics storage)
# 3. Grafana (visualization)
# 4. Loki (log aggregation - requires MinIO from data host)
# 5. Alloy (metrics/logs collector)

services:
  # ============================================================================
  # 1. PORTAINER - Container Management UI
  # ============================================================================
  # Deploy FIRST - no dependencies
  # Access: https://10.10.10.112:9443

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "10.10.10.112:9443:9443"  # HTTPS Web UI
      - "10.10.10.112:8000:8000"  # Edge agent tunnel
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
    networks:
      - obs_net
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--no-check-certificate", "https://localhost:9443"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 2. PROMETHEUS - Metrics Storage
  # ============================================================================
  # Deploy second - no dependencies
  # Access: http://10.10.10.112:9090 or https://prometheus.onurx.com

  prometheus:
    image: prom/prometheus:v3.1.0  # Latest stable version (2025)
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'  # 90 days retention
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-remote-write-receiver'  # Enable remote write (for Alloy)
      - '--web.enable-lifecycle'  # Enable reload via API
    ports:
      - "10.10.10.112:9090:9090"
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/config/rules:/etc/prometheus/rules:ro
      - ./prometheus/data:/prometheus
    networks:
      - obs_net
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 3. GRAFANA - Visualization & Dashboards
  # ============================================================================
  # Deploy third - connects to Prometheus
  # Access: http://10.10.10.112:3000 or https://grafana.onurx.com

  grafana:
    image: grafana/grafana:11.4.0  # Latest stable version (2025)
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://grafana.onurx.com
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    ports:
      - "10.10.10.112:3000:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - obs_net
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 4. LOKI - Log Aggregation
  # ============================================================================
  # Deploy fourth - stores logs locally (can use MinIO later for long-term storage)
  # Access: http://10.10.10.112:3100

  loki:
    image: grafana/loki:3.3.2  # Latest stable version (2025)
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/config.yml
    ports:
      - "10.10.10.112:3100:3100"
    volumes:
      - ./loki/config/config.yml:/etc/loki/config.yml:ro
      - ./loki/data:/loki
    networks:
      - obs_net
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 5. ALLOY - Metrics & Logs Collector
  # ============================================================================
  # Deploy fifth - collects metrics + logs, sends to Prometheus + Loki
  # Web UI: http://10.10.10.112:12345

  alloy:
    image: grafana/alloy:v1.11.2  # Latest stable version (2025)
    container_name: alloy
    restart: unless-stopped
    privileged: true  # Required for system metrics collection
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
    ports:
      - "10.10.10.112:12345:12345"  # Alloy web UI
      # OTLP ports (uncomment when enabling OpenTelemetry receiver in config.alloy)
      # - "10.10.10.112:4317:4317"    # OTLP gRPC (for app instrumentation)
      # - "10.10.10.112:4318:4318"    # OTLP HTTP (for app instrumentation)
    volumes:
      - ./alloy/config/config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker metrics + logs
      - /:/host/root:ro  # System metrics (CPU, disk, etc.)
      - /sys:/host/sys:ro  # System metrics
      - /proc:/host/proc:ro  # System metrics
      - /var/log:/var/log:ro  # System logs (syslog, auth.log)
      - ./alloy/data:/var/lib/alloy/data  # Alloy state
    networks:
      - obs_net
    depends_on:
      - prometheus
      - loki
    environment:
      - HOSTNAME=observability-vm
    # No health check - Alloy doesn't have wget/curl installed
    # Service is working if container is running and port 12345 is open
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 6. GRAYLOG STACK - Centralized Log Management
  # ============================================================================
  # Uses MongoDB from db host (10.10.10.111:27017)
  # Access Graylog UI: http://10.10.10.112:9000
  # GELF Input for Docker logs: udp://10.10.10.112:12201

  graylog-datanode:
    image: graylog/graylog-datanode:6.1
    container_name: graylog-datanode
    restart: unless-stopped
    hostname: graylog-datanode
    environment:
      - GRAYLOG_DATANODE_NODE_ID_FILE=/var/lib/graylog-datanode/node-id
      - GRAYLOG_DATANODE_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET}
      - GRAYLOG_DATANODE_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2}
      - GRAYLOG_DATANODE_MONGODB_URI=mongodb://${MONGODB_ROOT_USER}:${MONGODB_ROOT_PASSWORD}@10.10.10.111:27017/graylog?authSource=admin
    volumes:
      - ./graylog-datanode/data:/var/lib/graylog-datanode
    networks:
      - obs_net
    ports:
      - "10.10.10.112:8999:8999"   # DataNode API
      - "10.10.10.112:9200:9200"   # OpenSearch API
      - "10.10.10.112:9300:9300"   # OpenSearch transport
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  graylog:
    image: graylog/graylog:6.1
    container_name: graylog
    restart: unless-stopped
    hostname: graylog
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET}
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2}
      - GRAYLOG_HTTP_BIND_ADDRESS=0.0.0.0:9000
      - GRAYLOG_HTTP_EXTERNAL_URI=http://10.10.10.112:9000/
      - GRAYLOG_MONGODB_URI=mongodb://${MONGODB_ROOT_USER}:${MONGODB_ROOT_PASSWORD}@10.10.10.111:27017/graylog?authSource=admin
    entrypoint: /usr/bin/tini -- wait-for-it graylog-datanode:8999 -- /docker-entrypoint.sh
    volumes:
      - ./graylog/data:/usr/share/graylog/data/data
    networks:
      - obs_net
    depends_on:
      - graylog-datanode
    ports:
      - "10.10.10.112:9000:9000"   # Graylog web UI
      - "10.10.10.112:12201:12201/udp"  # GELF UDP (Docker logs)
      - "10.10.10.112:12201:12201/tcp"  # GELF TCP
      - "10.10.10.112:1514:1514/udp"    # Syslog UDP
      - "10.10.10.112:1514:1514/tcp"    # Syslog TCP
      # Additional input ports (uncomment as needed):
      # - "10.10.10.112:5044:5044"      # Beats
      # - "10.10.10.112:5140:5140/udp"  # Syslog UDP alt
      # - "10.10.10.112:5140:5140/tcp"  # Syslog TCP alt
      # - "10.10.10.112:5555:5555"      # RAW TCP
      # - "10.10.10.112:5555:5555/udp"  # RAW UDP
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/lbstatus"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  obs_net:
    driver: bridge

volumes:
  portainer_data:
  # prometheus_data:
  # grafana_data:
  # loki_data:
