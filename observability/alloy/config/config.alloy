// ============================================================================
// GRAFANA ALLOY CONFIGURATION (v1.11+)
// Modern unified telemetry collector for metrics and logs
// ============================================================================

// ============================================================================
// METRICS: System Metrics (replaces Node Exporter)
// ============================================================================

prometheus.exporter.unix "system" {
  // Collects CPU, memory, disk, network metrics
  // Enable all collectors for comprehensive system monitoring
  enable_collectors = [
    "cpu",
    "cpufreq",
    "diskstats",
    "filesystem",
    "loadavg",
    "meminfo",
    "netdev",
    "netstat",
    "stat",
    "time",
    "uname",
    "vmstat",
  ]
}

// Scrape system metrics from unix exporter
prometheus.scrape "system_metrics" {
  targets    = prometheus.exporter.unix.system.targets
  forward_to = [prometheus.remote_write.prometheus.receiver]
  scrape_interval = "15s"

  clustering {
    enabled = false
  }
}

// ============================================================================
// METRICS: Docker Container Metrics (replaces cAdvisor)
// ============================================================================

prometheus.exporter.cadvisor "docker" {
  docker_host = "unix:///var/run/docker.sock"
  storage_duration = "5m"

  // Collect container-level metrics
  // Includes CPU, memory, network, disk I/O per container
}

// Scrape Docker container metrics from cAdvisor exporter
prometheus.scrape "docker_metrics" {
  targets    = prometheus.exporter.cadvisor.docker.targets
  forward_to = [prometheus.remote_write.prometheus.receiver]
  scrape_interval = "15s"

  clustering {
    enabled = false
  }
}

// ============================================================================
// METRICS: Prometheus Remote Write
// ============================================================================

prometheus.remote_write "prometheus" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"

    // Optional: Add metadata
    headers = {
      "X-Source" = "alloy",
    }
  }

  // External labels added to all metrics
  external_labels = {
    cluster = "homelab",
    host = "observability-vm",
  }
}

// ============================================================================
// LOGS: Docker Container Discovery
// ============================================================================

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

// ============================================================================
// LOGS: Docker Container Logs Collection
// ============================================================================

loki.source.docker "containers" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.containers.targets
  forward_to = [loki.process.add_labels.receiver]

  // Relabeling to extract useful labels
  relabel_rules = discovery.relabel.docker_labels.rules
}

// Relabeling rules for Docker containers
discovery.relabel "docker_labels" {
  targets = discovery.docker.containers.targets

  // Extract container name
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
    target_label  = "container"
  }

  // Extract container ID (short)
  rule {
    source_labels = ["__meta_docker_container_id"]
    regex         = "(.{12}).*"
    target_label  = "container_id"
  }

  // Extract image name
  rule {
    source_labels = ["__meta_docker_container_image"]
    target_label  = "image"
  }

  // Extract compose project
  rule {
    source_labels = ["__meta_docker_container_label_com_docker_compose_project"]
    target_label  = "compose_project"
  }

  // Extract compose service
  rule {
    source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    target_label  = "compose_service"
  }
}

// ============================================================================
// LOGS: Processing and Labeling
// ============================================================================

loki.process "add_labels" {
  forward_to = [loki.write.loki.receiver]

  // Parse Docker logs
  stage.docker {}

  // Add static labels
  stage.static_labels {
    values = {
      host = "observability-vm",
      cluster = "homelab",
    }
  }

  // Extract log level (error, warn, info, debug)
  stage.regex {
    expression = "(?i)level=(?P<level>\\w+)"
  }

  stage.labels {
    values = {
      level = "",
    }
  }
}

// ============================================================================
// LOGS: System Logs Collection (optional - /var/log)
// ============================================================================
// Disabled: Container doesn't have access to host system logs
// To enable: ensure /var/log volume mount includes these files
//
// loki.source.file "system_logs" {
//   targets = [
//     {
//       __path__ = "/var/log/syslog",
//       job      = "syslog",
//       host     = "observability-vm",
//     },
//     {
//       __path__ = "/var/log/auth.log",
//       job      = "auth",
//       host     = "observability-vm",
//     },
//   ]
//   forward_to = [loki.write.loki.receiver]
// }

// ============================================================================
// LOGS: Loki Write Endpoint
// ============================================================================

loki.write "loki" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }

  // External labels added to all logs
  external_labels = {
    cluster = "homelab",
  }
}

// ============================================================================
// OPTIONAL: OpenTelemetry Receiver (for app instrumentation)
// ============================================================================
// Uncomment when you want to instrument your web apps with OpenTelemetry
// Requires otelcol.exporter to convert OTLP to Prometheus/Loki formats
//
// otelcol.receiver.otlp "default" {
//   grpc {
//     endpoint = "0.0.0.0:4317"
//   }
//
//   http {
//     endpoint = "0.0.0.0:4318"
//   }
//
//   output {
//     metrics = [otelcol.exporter.prometheus.default.input]
//     logs    = [otelcol.exporter.loki.default.input]
//   }
// }
//
// otelcol.exporter.prometheus "default" {
//   forward_to = [prometheus.remote_write.prometheus.receiver]
// }
//
// otelcol.exporter.loki "default" {
//   forward_to = [loki.write.loki.receiver]
// }
