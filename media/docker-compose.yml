
# MEDIA HOST: Jellyfin + Arr Stack + n8n + Paperless
# Build services one at a time in this order:
# 1. Jellyfin (media server)
# 2. Prowlarr (indexer manager)
# 3. Sonarr (TV shows)
# 4. Radarr (movies)
# 5. qBittorrent (download client)
# 6. n8n (workflow automation - requires PostgreSQL from data host)
# 7. Paperless-ngx (document management - requires PostgreSQL + Redis from data host)

services:
  # ============================================================================
  # PORTAINER AGENT - Container Management
  # ============================================================================
  # Connects to Portainer on observability VM (10.10.10.112:9443)

  portainer-agent:
    image: portainer/agent:latest
    container_name: portainer-agent
    restart: always
    ports:
      - "10.10.10.113:9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - media_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 1. JELLYFIN - Media Server (COMING NEXT)
  # ============================================================================
  # Deploy first - requires NAS mounts (/mnt/nas/media)
  # Access: http://10.10.10.113:8096

  # jellyfin:
  #   image: jellyfin/jellyfin:latest
  #   container_name: jellyfin
  #   restart: unless-stopped
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=UTC
  #     - JELLYFIN_PublishedServerUrl=https://jellyfin.yourdomain.com
  #   ports:
  #     - "10.10.10.113:8096:8096"      # Web UI
  #     - "10.10.10.113:8920:8920"      # HTTPS (optional)
  #     - "10.10.10.113:7359:7359/udp"  # Service discovery
  #     - "10.10.10.113:1900:1900/udp"  # Service discovery
  #   volumes:
  #     - ./jellyfin/data/config:/config
  #     - ./jellyfin/data/cache:/cache
  #     - /mnt/nas/media/movies:/media/movies:ro
  #     - /mnt/nas/media/tv:/media/tv:ro
  #     - /mnt/nas/media/music:/media/music:ro
  #   devices:
  #     - /dev/dri:/dev/dri  # Hardware transcoding (Intel/AMD GPU)
  #   networks:
  #     - media_net
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.yourdomain.com`)"
  #     - "traefik.http.routers.jellyfin.entrypoints=websecure"
  #     - "traefik.http.routers.jellyfin.tls.certresolver=cloudflare"
  #     - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

  # ============================================================================
  # 2. PROWLARR - Indexer Manager (COMING NEXT)
  # ============================================================================
  # Deploy second - manages indexers for Sonarr/Radarr
  # Access: http://10.10.10.113:9696

  # prowlarr:
  #   image: lscr.io/linuxserver/prowlarr:latest
  #   container_name: prowlarr
  #   restart: unless-stopped
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=UTC
  #   ports:
  #     - "10.10.10.113:9696:9696"
  #   volumes:
  #     - ./prowlarr/data:/config
  #   networks:
  #     - media_net

  # ============================================================================
  # 3. SONARR - TV Show Management (COMING NEXT)
  # ============================================================================
  # Deploy third - requires Prowlarr, qBittorrent, Jellyfin
  # Access: http://10.10.10.113:8989

  # sonarr:
  #   image: lscr.io/linuxserver/sonarr:latest
  #   container_name: sonarr
  #   restart: unless-stopped
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=UTC
  #   ports:
  #     - "10.10.10.113:8989:8989"
  #   volumes:
  #     - ./sonarr/data:/config
  #     - /mnt/nas/media/tv:/tv
  #     - /mnt/nas/downloads:/downloads
  #   networks:
  #     - media_net

  # ============================================================================
  # 4. RADARR - Movie Management (COMING NEXT)
  # ============================================================================
  # Deploy fourth - requires Prowlarr, qBittorrent, Jellyfin
  # Access: http://10.10.10.113:7878

  # radarr:
  #   image: lscr.io/linuxserver/radarr:latest
  #   container_name: radarr
  #   restart: unless-stopped
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=UTC
  #   ports:
  #     - "10.10.10.113:7878:7878"
  #   volumes:
  #     - ./radarr/data:/config
  #     - /mnt/nas/media/movies:/movies
  #     - /mnt/nas/downloads:/downloads
  #   networks:
  #     - media_net

  # ============================================================================
  # 5. QBITTORRENT - Download Client (COMING NEXT)
  # ============================================================================
  # Deploy fifth - used by Sonarr/Radarr
  # Access: http://10.10.10.113:8080 (user: admin, password: in logs first run)

  # qbittorrent:
  #   image: lscr.io/linuxserver/qbittorrent:latest
  #   container_name: qbittorrent
  #   restart: unless-stopped
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=UTC
  #     - WEBUI_PORT=8080
  #   ports:
  #     - "10.10.10.113:8080:8080"  # Web UI
  #     - "10.10.10.113:6881:6881"  # Torrent port
  #     - "10.10.10.113:6881:6881/udp"
  #   volumes:
  #     - ./qbittorrent/data:/config
  #     - /mnt/nas/downloads:/downloads
  #   networks:
  #     - media_net

  # ============================================================================
  # 6. N8N - Workflow Automation (COMING NEXT)
  # ============================================================================
  # Deploy sixth - requires PostgreSQL from data host (10.10.10.111)
  # Access: http://10.10.10.113:5678

  # n8n:
  #   image: n8nio/n8n:latest
  #   container_name: n8n
  #   restart: unless-stopped
  #   environment:
  #     - N8N_HOST=n8n.yourdomain.com
  #     - N8N_PORT=5678
  #     - N8N_PROTOCOL=https
  #     - DB_TYPE=postgresdb
  #     - DB_POSTGRESDB_HOST=10.10.10.111
  #     - DB_POSTGRESDB_PORT=5432
  #     - DB_POSTGRESDB_DATABASE=n8n
  #     - DB_POSTGRESDB_USER=${N8N_DB_USER}
  #     - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
  #     - WEBHOOK_URL=https://n8n.yourdomain.com/
  #   ports:
  #     - "10.10.10.113:5678:5678"
  #   volumes:
  #     - ./n8n/data:/home/node/.n8n
  #   networks:
  #     - media_net
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.n8n.rule=Host(`n8n.yourdomain.com`)"
  #     - "traefik.http.routers.n8n.entrypoints=websecure"
  #     - "traefik.http.routers.n8n.tls.certresolver=cloudflare"
  #     - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  # ============================================================================
  # 7. PAPERLESS-NGX - Document Management (COMING NEXT)
  # ============================================================================
  # Deploy seventh - requires PostgreSQL + Redis from data host (10.10.10.111)
  # Access: http://10.10.10.113:8000

  # paperless:
  #   image: ghcr.io/paperless-ngx/paperless-ngx:latest
  #   container_name: paperless
  #   restart: unless-stopped
  #   environment:
  #     PAPERLESS_REDIS: redis://10.10.10.111:6379
  #     PAPERLESS_DBHOST: 10.10.10.111
  #     PAPERLESS_DBPORT: 5432
  #     PAPERLESS_DBNAME: paperless
  #     PAPERLESS_DBUSER: ${PAPERLESS_DB_USER}
  #     PAPERLESS_DBPASS: ${PAPERLESS_DB_PASSWORD}
  #     PAPERLESS_URL: https://paperless.yourdomain.com
  #     PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
  #     PAPERLESS_TIME_ZONE: UTC
  #     PAPERLESS_OCR_LANGUAGE: eng
  #   ports:
  #     - "10.10.10.113:8000:8000"
  #   volumes:
  #     - ./paperless/data/data:/usr/src/paperless/data
  #     - ./paperless/data/media:/usr/src/paperless/media
  #     - ./paperless/data/export:/usr/src/paperless/export
  #     - ./paperless/data/consume:/usr/src/paperless/consume
  #   networks:
  #     - media_net
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.paperless.rule=Host(`paperless.yourdomain.com`)"
  #     - "traefik.http.routers.paperless.entrypoints=websecure"
  #     - "traefik.http.routers.paperless.tls.certresolver=cloudflare"
  #     - "traefik.http.services.paperless.loadbalancer.server.port=8000"

networks:
  media_net:
    driver: bridge

volumes:
  jellyfin_config:
  jellyfin_cache:
  # prowlarr_config:
  # sonarr_config:
  # radarr_config:
  # qbittorrent_config:
  # n8n_data:
  # paperless_data:
