# Traefik Routers - Traffic Routing Rules

http:
  # Routers match incoming requests and decide where to send them
  routers:
    # Authentik (SSO) - no auth middleware on itself
    authentik:
      rule: "Host(`auth.onurx.com`)"
      entryPoints:
        - websecure
      service: authentik-svc
      middlewares:
        - security-headers
      tls:
        certResolver: cloudflare

    # Portainer
    portainer:
      rule: "Host(`portainer.onurx.com`)"
      entryPoints:
        - websecure
      service: portainer
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # Grafana (Authentik disabled until we configure it)
    grafana:
      rule: "Host(`grafana.onurx.com`)"
      entryPoints:
        - websecure
      service: grafana
      middlewares:
        - security-headers
      tls:
        certResolver: cloudflare

    # Prometheus (Authentik disabled until we configure it)
    prometheus:
      rule: "Host(`prometheus.onurx.com`)"
      entryPoints:
        - websecure
      service: prometheus
      middlewares:
        - security-headers
      tls:
        certResolver: cloudflare

    # Loki (API access - optional, mainly used internally)
    loki:
      rule: "Host(`loki.onurx.com`)"
      entryPoints:
        - websecure
      service: loki
      middlewares:
        - security-headers
      tls:
        certResolver: cloudflare

    # Alloy (Web UI - optional, for debugging)
    alloy:
      rule: "Host(`alloy.onurx.com`)"
      entryPoints:
        - websecure
      service: alloy
      middlewares:
        - security-headers
      tls:
        certResolver: cloudflare

    # Sonarr
    sonarr:
      rule: "Host(`sonarr.onurx.com`)"
      entryPoints:
        - websecure
      service: sonarr
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # Radarr
    radarr:
      rule: "Host(`radarr.onurx.com`)"
      entryPoints:
        - websecure
      service: radarr
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # Prowlarr
    prowlarr:
      rule: "Host(`prowlarr.onurx.com`)"
      entryPoints:
        - websecure
      service: prowlarr
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # Jellyfin
    jellyfin:
      rule: "Host(`jellyfin.onurx.com`)"
      entryPoints:
        - websecure
      service: jellyfin
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # qBittorrent
    qbittorrent:
      rule: "Host(`qbittorrent.onurx.com`)"
      entryPoints:
        - websecure
      service: qbittorrent
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # n8n
    n8n:
      rule: "Host(`n8n.onurx.com`)"
      entryPoints:
        - websecure
      service: n8n
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # Paperless
    paperless:
      rule: "Host(`paperless.onurx.com`)"
      entryPoints:
        - websecure
      service: paperless
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # Coolify
    coolify:
      rule: "Host(`coolify.onurx.com`)"
      entryPoints:
        - websecure
      service: coolify
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # MinIO Console
    minio-console:
      rule: "Host(`minio.onurx.com`)"
      entryPoints:
        - websecure
      service: minio-console
      middlewares:
        - authentik
        - security-headers
      tls:
        certResolver: cloudflare

    # MinIO API (S3)
    minio-api:
      rule: "Host(`s3.onurx.com`)"
      entryPoints:
        - websecure
      service: minio-api
      middlewares:
        - security-headers
      tls:
        certResolver: cloudflare
