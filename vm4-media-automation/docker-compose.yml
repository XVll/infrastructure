version: '3.8'

services:
  # Sonarr - TV Show Management
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    ports:
      - "10.10.12.10:8989:8989"
    volumes:
      - ./data/sonarr:/config
      - ${NAS_MEDIA_PATH}/tv:/tv
      - ${NAS_DOWNLOADS_PATH}:/downloads
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Radarr - Movie Management
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    ports:
      - "10.10.12.10:7878:7878"
    volumes:
      - ./data/radarr:/config
      - ${NAS_MEDIA_PATH}/movies:/movies
      - ${NAS_DOWNLOADS_PATH}:/downloads
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prowlarr - Indexer Management
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    ports:
      - "10.10.12.10:9696:9696"
    volumes:
      - ./data/prowlarr:/config
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Jellyfin - Media Server
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
    ports:
      - "10.10.12.10:8096:8096"
      - "10.10.12.10:8920:8920"  # HTTPS (optional)
      - "10.10.12.10:7359:7359/udp"  # Service discovery
      - "10.10.12.10:1900:1900/udp"  # Service discovery
    volumes:
      - ./data/jellyfin/config:/config
      - ./data/jellyfin/cache:/cache
      - ${NAS_MEDIA_PATH}/movies:/media/movies:ro
      - ${NAS_MEDIA_PATH}/tv:/media/tv:ro
      - ${NAS_MEDIA_PATH}/music:/media/music:ro
    devices:
      - /dev/dri:/dev/dri  # Hardware transcoding (Intel/AMD GPU)
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # qBittorrent - Torrent Client
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - WEBUI_PORT=8080
    ports:
      - "10.10.12.10:8080:8080"  # Web UI
      - "10.10.12.10:6881:6881"  # Torrent port TCP
      - "10.10.12.10:6881:6881/udp"  # Torrent port UDP
    volumes:
      - ./data/qbittorrent:/config
      - ${NAS_DOWNLOADS_PATH}:/downloads
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # n8n - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      - N8N_HOST=n8n.${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://n8n.${DOMAIN}/
      - GENERIC_TIMEZONE=UTC
      # Database (PostgreSQL on VM2)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=10.10.11.10
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - DB_POSTGRESDB_SSL_ENABLED=true
      - DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false
      # Encryption key
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      # Redis Queue (optional, for scaling)
      - QUEUE_BULL_REDIS_HOST=10.10.11.10
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_BULL_REDIS_TLS=true
      - EXECUTIONS_MODE=queue
    ports:
      - "10.10.12.10:5678:5678"
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Paperless-ngx - Document Management
  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    restart: unless-stopped
    environment:
      # Core settings
      PAPERLESS_URL=https://paperless.${DOMAIN}
      PAPERLESS_TIME_ZONE=UTC
      PAPERLESS_OCR_LANGUAGE=eng
      # Database (PostgreSQL on VM2)
      PAPERLESS_DBHOST=10.10.11.10
      PAPERLESS_DBPORT=5432
      PAPERLESS_DBNAME=paperless
      PAPERLESS_DBUSER=paperless
      PAPERLESS_DBPASS=${PAPERLESS_DB_PASSWORD}
      PAPERLESS_DBSSLMODE=require
      # Redis (on VM2)
      PAPERLESS_REDIS=rediss://:${REDIS_PASSWORD}@10.10.11.10:6379
      # Admin user
      PAPERLESS_ADMIN_USER=${PAPERLESS_ADMIN_USER:-admin}
      PAPERLESS_ADMIN_PASSWORD=${PAPERLESS_ADMIN_PASSWORD}
      # Optional: Tika and Gotenberg for advanced OCR
      PAPERLESS_TIKA_ENABLED=true
      PAPERLESS_TIKA_ENDPOINT=http://tika:9998
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT=http://gotenberg:3000
    ports:
      - "10.10.12.10:8000:8000"
    volumes:
      - ./data/paperless/data:/usr/src/paperless/data
      - ./data/paperless/media:/usr/src/paperless/media
      - ./data/paperless/export:/usr/src/paperless/export
      - ./data/paperless/consume:/usr/src/paperless/consume
    networks:
      - media_network
    depends_on:
      - tika
      - gotenberg
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Tika - Document parser for Paperless
  tika:
    image: apache/tika:latest
    container_name: tika
    restart: unless-stopped
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Gotenberg - PDF renderer for Paperless
  gotenberg:
    image: gotenberg/gotenberg:latest
    container_name: gotenberg
    restart: unless-stopped
    command:
      - "gotenberg"
      - "--chromium-disable-routes=true"
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Kavita - eBook/Manga/Comic Server
  kavita:
    image: kizaing/kavita:latest
    container_name: kavita
    restart: unless-stopped
    environment:
      - TZ=UTC
    ports:
      - "10.10.12.10:5000:5000"
    volumes:
      - ./data/kavita:/kavita/config
      - ${NAS_MEDIA_PATH}/books:/books
      - ${NAS_MEDIA_PATH}/comics:/comics
      - ${NAS_MEDIA_PATH}/manga:/manga
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FlareSolverr - Proxy for Prowlarr (bypasses Cloudflare)
  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - TZ=UTC
    ports:
      - "10.10.12.10:8191:8191"
    networks:
      - media_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Exportarr - Prometheus exporters for Sonarr/Radarr/Prowlarr
  exportarr-sonarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: exportarr-sonarr
    restart: unless-stopped
    command: ["sonarr"]
    environment:
      - PORT=9897
      - URL=http://sonarr:8989
      - APIKEY=${SONARR_API_KEY}
    ports:
      - "10.10.12.10:9897:9897"
    networks:
      - media_network
    depends_on:
      - sonarr

  exportarr-radarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: exportarr-radarr
    restart: unless-stopped
    command: ["radarr"]
    environment:
      - PORT=9898
      - URL=http://radarr:7878
      - APIKEY=${RADARR_API_KEY}
    ports:
      - "10.10.12.10:9898:9898"
    networks:
      - media_network
    depends_on:
      - radarr

  exportarr-prowlarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: exportarr-prowlarr
    restart: unless-stopped
    command: ["prowlarr"]
    environment:
      - PORT=9899
      - URL=http://prowlarr:9696
      - APIKEY=${PROWLARR_API_KEY}
    ports:
      - "10.10.12.10:9899:9899"
    networks:
      - media_network
    depends_on:
      - prowlarr

networks:
  media_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.12.0/24
          gateway: 10.10.12.1

volumes:
  sonarr_data:
  radarr_data:
  prowlarr_data:
  jellyfin_config:
  jellyfin_cache:
  qbittorrent_data:
  n8n_data:
  paperless_data:
  paperless_media:
  paperless_export:
  paperless_consume:
  kavita_data:
