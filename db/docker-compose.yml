# DATA HOST: Databases Only
# Build services one at a time in this order:
# 1. MongoDB (document database)
# 2. PostgreSQL (relational database)
# 3. Redis (cache & sessions)
# 4. MinIO (object storage)

services:
  # ============================================================================
  # 1. MONGODB - Document Database
  # ============================================================================
  # Deploy first - used by Komodo, other apps
  # Access: mongodb://10.10.10.111:27017

  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    ports:
      - "10.10.10.111:27017:27017"
    volumes:
      - ./mongodb/data:/data/db
      - ./mongodb/config/mongod.conf:/etc/mongod.conf:ro
      - ./mongodb/certs:/certs:ro
      - /mnt/nas/backups/mongodb:/backups
    command: ["--config", "/etc/mongod.conf"]
    networks:
      - data_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 2. POSTGRESQL - Relational Database (COMING NEXT)
  # ============================================================================
  # Used by: Authentik, Grafana, n8n, Paperless, custom apps
  # Uncomment when ready to deploy

  # postgres:
  #   image: postgres:16-alpine
  #   container_name: postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: postgres
  #   ports:
  #     - "10.10.10.111:5432:5432"
  #   volumes:
  #     - ./postgres/data:/var/lib/postgresql/data
  #     - ./postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
  #     - ./postgres/config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
  #     - ./postgres/certs:/certs:ro
  #     - /mnt/nas/backups/postgres:/backups
  #   command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
  #   networks:
  #     - data_net
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # ============================================================================
  # 3. REDIS - Cache & Session Storage (COMING NEXT)
  # ============================================================================
  # Used by: Authentik, Paperless, caching layers
  # Uncomment when ready to deploy

  # redis:
  #   image: redis:7-alpine
  #   container_name: redis
  #   restart: unless-stopped
  #   command: >
  #     redis-server
  #     --requirepass ${REDIS_PASSWORD}
  #     --maxmemory 2gb
  #     --maxmemory-policy allkeys-lru
  #     --appendonly yes
  #   ports:
  #     - "10.10.10.111:6379:6379"
  #   volumes:
  #     - ./redis/data:/data
  #     - ./redis/certs:/certs:ro
  #     - /mnt/nas/backups/redis:/backups
  #   networks:
  #     - data_net
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # ============================================================================
  # 4. MINIO - S3-Compatible Object Storage (COMING NEXT)
  # ============================================================================
  # Used by: Loki (logs), backups, object storage needs
  # Uncomment when ready to deploy

  # minio:
  #   image: minio/minio:latest
  #   container_name: minio
  #   restart: unless-stopped
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #   command: server /data --console-address ":9001"
  #   ports:
  #     - "10.10.10.111:9000:9000"  # S3 API
  #     - "10.10.10.111:9001:9001"  # Web Console
  #   volumes:
  #     - ./minio/data:/data
  #     - ./minio/certs:/certs:ro
  #     - /mnt/nas/backups/minio:/backups
  #   networks:
  #     - data_net
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

networks:
  data_net:
    driver: bridge

volumes:
  mongodb_data:
  # postgres_data:
  # redis_data:
  # minio_data:
