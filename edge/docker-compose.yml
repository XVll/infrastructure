
# EDGE HOST: Traefik + AdGuard + Authentik
# Build services one at a time in this order:
# 1. Traefik (reverse proxy)
# 2. AdGuard Home (DNS)
# 3. Authentik (SSO - requires PostgreSQL + Redis from data host)

services:
  # ============================================================================
  # PORTAINER AGENT - Container Management
  # ============================================================================
  # Connects to Portainer on observability VM (10.10.10.112:9443)

  portainer-agent:
    image: portainer/agent:latest
    container_name: portainer-agent
    restart: always
    ports:
      - "10.10.10.110:9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - edge_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # ALLOY - Log Shipper (sends Docker logs to Loki on observability VM)
  # ============================================================================

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./alloy/config:/etc/alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "10.10.10.110:12345:12345"  # Alloy UI
    networks:
      - edge_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # BESZEL AGENT - System Monitor (sends data to Hub on observability VM)
  # ============================================================================
  # Configure after deploying Hub (copy connection details from Hub web UI)

  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host  # Required for network interface stats
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker container stats
    environment:
      # These will be provided by Hub web UI after adding system
      # Update these values after deploying Hub
      LISTEN: ":45876"
      HUB_URL: "http://10.10.10.112:8090"
      # KEY: "paste_public_key_from_hub_here"
      # TOKEN: "paste_token_from_hub_here"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 1. TRAEFIK - Reverse Proxy & SSL Termination
  # ============================================================================
  # Deploy first - no dependencies
  # Access: http://10.10.10.110:8080 (dashboard)

  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    ports:
      - "80:80"       # HTTP
      - "443:443"     # HTTPS
      - "8080:8080"   # Dashboard
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config/traefik.yml:/traefik.yml:ro
      - ./traefik/config/dynamic:/dynamic:ro
      - ./traefik/data:/data
    networks:
      - edge_net
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 2. ADGUARD HOME - DNS Server
  # ============================================================================
  # Deploy second - no dependencies
  # Access: http://10.10.10.110:8888 (web UI)
  # Config: ./adguard/data/conf/AdGuardHome.yaml (DNS rewrites pre-configured)

  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard
    restart: unless-stopped
    ports:
      - "10.10.10.110:53:53/tcp"      # DNS
      - "10.10.10.110:53:53/udp"      # DNS
      - "10.10.10.110:3000:3000/tcp"  # Initial setup
      - "10.10.10.110:8888:80/tcp"    # Web interface (avoiding conflict with Traefik)
    volumes:
      - ./adguard/data/work:/opt/adguardhome/work
      - ./adguard/data/conf:/opt/adguardhome/conf
    networks:
      - edge_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 3. AUTHENTIK - SSO & Identity Provider
  # ============================================================================
  # Deploy third - requires PostgreSQL + Redis from db host (10.10.10.111)
  # Access: https://auth.onurx.com (via Traefik)
  # Routed via: traefik/config/dynamic/routers.yml

  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      # Redis connection (db host)
      AUTHENTIK_REDIS__HOST: 10.10.10.111
      AUTHENTIK_REDIS__PORT: 6379
      AUTHENTIK_REDIS__PASSWORD: ${REDIS_PASSWORD}
      # PostgreSQL connection (db host)
      AUTHENTIK_POSTGRESQL__HOST: 10.10.10.111
      AUTHENTIK_POSTGRESQL__PORT: 5432
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_DB_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      # Authentik configuration
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
      AUTHENTIK_AVATARS: "initials"
    ports:
      - "10.10.10.110:9000:9000"   # HTTP (for Traefik backend)
    volumes:
      - ./authentik/data/media:/media
      - ./authentik/data/custom-templates:/templates
    networks:
      - edge_net
    depends_on:
      - authentik-worker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      # Redis connection (db host)
      AUTHENTIK_REDIS__HOST: 10.10.10.111
      AUTHENTIK_REDIS__PORT: 6379
      AUTHENTIK_REDIS__PASSWORD: ${REDIS_PASSWORD}
      # PostgreSQL connection (db host)
      AUTHENTIK_POSTGRESQL__HOST: 10.10.10.111
      AUTHENTIK_POSTGRESQL__PORT: 5432
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_DB_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      # Authentik configuration
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
    volumes:
      - ./authentik/data/media:/media
      - ./authentik/data/custom-templates:/templates
    networks:
      - edge_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # 4. NETBIRD - VPN Client (NetBird Cloud)
  # ============================================================================
  # Connects to NetBird cloud infrastructure for remote access
  # Uses host network mode for WireGuard connectivity
  # DNS configuration managed via NetBird cloud console

  netbird:
    image: netbirdio/netbird:latest
    container_name: netbird
    hostname: netbird-edge
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_RESOURCE
    environment:
      - NB_SETUP_KEY=${NETBIRD_TOKEN}
    volumes:
      - ./netbird/data/netbird-client:/var/lib/netbird
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  edge_net:
    driver: bridge

volumes:
  traefik_data:
  # adguard_work:
  # adguard_conf:
  # authentik_media:
